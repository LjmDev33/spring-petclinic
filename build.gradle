plugins {
  id 'java'
  // id 'checkstyle'  // 👉 Checkstyle 비활성화
  id 'org.springframework.boot' version '3.5.0'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.graalvm.buildtools.native' version '0.10.6'
  id 'org.cyclonedx.bom' version '2.3.1'
  // id 'io.spring.javaformat' version '0.0.46' // 👉 Spring Java Format 비활성화
  // id "io.spring.nohttp" version "0.0.11"     // 👉 NoHTTP 규칙 검사 비활성화
}

// gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
version = '3.5.0'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
}

ext.checkstyleVersion = "10.25.0"
ext.springJavaformatCheckstyleVersion = "0.0.46"
ext.webjarsLocatorLiteVersion = "1.1.0"
ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.6"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars:webjars-locator-lite:${webjarsLocatorLiteVersion}"
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.mysql:mysql-connector-j'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'

  // QueryDSL 라이브러리 추가
  implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
  implementation "com.querydsl:querydsl-core"
  implementation "com.querydsl:querydsl-collections"
  annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"
  // QueryDSL 라이브러리 추가 끝

  // checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
  // checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
  enabled = false
}

/*
// 👉 Checkstyle, JavaFormat 관련 설정 전체 비활성화
checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false
*/

def querydslDir = "src/main/generated"

sourceSets {
  main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
  options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

wrapper {
  gradleVersion = "8.14.3"
  distributionType = Wrapper.DistributionType.ALL
}
